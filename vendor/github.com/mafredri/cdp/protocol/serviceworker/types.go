// Code generated by cdpgen. DO NOT EDIT.

package serviceworker

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/mafredri/cdp/protocol/target"
)

// Registration ServiceWorker registration.
type Registration struct {
	RegistrationID string `json:"registrationId"` // No description.
	ScopeURL       string `json:"scopeURL"`       // No description.
	IsDeleted      bool   `json:"isDeleted"`      // No description.
}

// VersionRunningStatus
type VersionRunningStatus int

// VersionRunningStatus as enums.
const (
	VersionRunningStatusNotSet VersionRunningStatus = iota
	VersionRunningStatusStopped
	VersionRunningStatusStarting
	VersionRunningStatusRunning
	VersionRunningStatusStopping
)

// Valid returns true if enum is set.
func (e VersionRunningStatus) Valid() bool {
	return e >= 1 && e <= 4
}

func (e VersionRunningStatus) String() string {
	switch e {
	case 0:
		return "VersionRunningStatusNotSet"
	case 1:
		return "stopped"
	case 2:
		return "starting"
	case 3:
		return "running"
	case 4:
		return "stopping"
	}
	return fmt.Sprintf("VersionRunningStatus(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e VersionRunningStatus) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("serviceworker.VersionRunningStatus: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *VersionRunningStatus) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"stopped\"":
		*e = 1
	case "\"starting\"":
		*e = 2
	case "\"running\"":
		*e = 3
	case "\"stopping\"":
		*e = 4
	default:
		return fmt.Errorf("serviceworker.VersionRunningStatus: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// VersionStatus
type VersionStatus int

// VersionStatus as enums.
const (
	VersionStatusNotSet VersionStatus = iota
	VersionStatusNew
	VersionStatusInstalling
	VersionStatusInstalled
	VersionStatusActivating
	VersionStatusActivated
	VersionStatusRedundant
)

// Valid returns true if enum is set.
func (e VersionStatus) Valid() bool {
	return e >= 1 && e <= 6
}

func (e VersionStatus) String() string {
	switch e {
	case 0:
		return "VersionStatusNotSet"
	case 1:
		return "new"
	case 2:
		return "installing"
	case 3:
		return "installed"
	case 4:
		return "activating"
	case 5:
		return "activated"
	case 6:
		return "redundant"
	}
	return fmt.Sprintf("VersionStatus(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e VersionStatus) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("serviceworker.VersionStatus: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *VersionStatus) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"new\"":
		*e = 1
	case "\"installing\"":
		*e = 2
	case "\"installed\"":
		*e = 3
	case "\"activating\"":
		*e = 4
	case "\"activated\"":
		*e = 5
	case "\"redundant\"":
		*e = 6
	default:
		return fmt.Errorf("serviceworker.VersionStatus: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// Version ServiceWorker version.
type Version struct {
	VersionID          string               `json:"versionId"`                    // No description.
	RegistrationID     string               `json:"registrationId"`               // No description.
	ScriptURL          string               `json:"scriptURL"`                    // No description.
	RunningStatus      VersionRunningStatus `json:"runningStatus"`                // No description.
	Status             VersionStatus        `json:"status"`                       // No description.
	ScriptLastModified *float64             `json:"scriptLastModified,omitempty"` // The Last-Modified header value of the main script.
	ScriptResponseTime *float64             `json:"scriptResponseTime,omitempty"` // The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated.
	ControlledClients  []target.ID          `json:"controlledClients,omitempty"`  // No description.
	TargetID           *target.ID           `json:"targetId,omitempty"`           // No description.
}

// ErrorMessage ServiceWorker error message.
type ErrorMessage struct {
	ErrorMessage   string `json:"errorMessage"`   // No description.
	RegistrationID string `json:"registrationId"` // No description.
	VersionID      string `json:"versionId"`      // No description.
	SourceURL      string `json:"sourceURL"`      // No description.
	LineNumber     int    `json:"lineNumber"`     // No description.
	ColumnNumber   int    `json:"columnNumber"`   // No description.
}
