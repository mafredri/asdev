// Code generated by cdpgen. DO NOT EDIT.

package profiler

import (
	"github.com/mafredri/cdp/protocol/runtime"
)

// ProfileNode Profile node. Holds callsite information, execution statistics and child nodes.
type ProfileNode struct {
	ID        int               `json:"id"`        // Unique id of the node.
	CallFrame runtime.CallFrame `json:"callFrame"` // Function location.
	// HitCount Number of samples where this node was on top of the call stack.
	//
	// Note: This property is experimental.
	HitCount    *int    `json:"hitCount,omitempty"`
	Children    []int   `json:"children,omitempty"`    // Child node ids.
	DeoptReason *string `json:"deoptReason,omitempty"` // The reason of being not optimized. The function may be deoptimized or marked as don't optimize.
	// PositionTicks An array of source position ticks.
	//
	// Note: This property is experimental.
	PositionTicks []PositionTickInfo `json:"positionTicks,omitempty"`
}

// Profile Profile.
type Profile struct {
	Nodes      []ProfileNode `json:"nodes"`                // The list of profile nodes. First item is the root node.
	StartTime  float64       `json:"startTime"`            // Profiling start timestamp in microseconds.
	EndTime    float64       `json:"endTime"`              // Profiling end timestamp in microseconds.
	Samples    []int         `json:"samples,omitempty"`    // Ids of samples top nodes.
	TimeDeltas []int         `json:"timeDeltas,omitempty"` // Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.
}

// PositionTickInfo Specifies a number of samples attributed to a certain source position.
//
// Note: This type is experimental.
type PositionTickInfo struct {
	Line  int `json:"line"`  // Source line number (1-based).
	Ticks int `json:"ticks"` // Number of samples attributed to the source line.
}

// CoverageRange Coverage data for a source range.
//
// Note: This type is experimental.
type CoverageRange struct {
	StartOffset int `json:"startOffset"` // JavaScript script source offset for the range start.
	EndOffset   int `json:"endOffset"`   // JavaScript script source offset for the range end.
	Count       int `json:"count"`       // Collected execution count of the source range.
}

// FunctionCoverage Coverage data for a JavaScript function.
//
// Note: This type is experimental.
type FunctionCoverage struct {
	FunctionName    string          `json:"functionName"`    // JavaScript function name.
	Ranges          []CoverageRange `json:"ranges"`          // Source ranges inside the function with coverage data.
	IsBlockCoverage bool            `json:"isBlockCoverage"` // Whether coverage data for this function has block granularity.
}

// ScriptCoverage Coverage data for a JavaScript script.
//
// Note: This type is experimental.
type ScriptCoverage struct {
	ScriptID  runtime.ScriptID   `json:"scriptId"`  // JavaScript script id.
	URL       string             `json:"url"`       // JavaScript script name or url.
	Functions []FunctionCoverage `json:"functions"` // Functions contained in the script that has coverage data.
}
