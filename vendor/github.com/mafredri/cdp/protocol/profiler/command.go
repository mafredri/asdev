// Code generated by cdpgen. DO NOT EDIT.

package profiler

// SetSamplingIntervalArgs represents the arguments for SetSamplingInterval in the Profiler domain.
type SetSamplingIntervalArgs struct {
	Interval int `json:"interval"` // New sampling interval in microseconds.
}

// NewSetSamplingIntervalArgs initializes SetSamplingIntervalArgs with the required arguments.
func NewSetSamplingIntervalArgs(interval int) *SetSamplingIntervalArgs {
	args := new(SetSamplingIntervalArgs)
	args.Interval = interval
	return args
}

// StopReply represents the return values for Stop in the Profiler domain.
type StopReply struct {
	Profile Profile `json:"profile"` // Recorded profile.
}

// StartPreciseCoverageArgs represents the arguments for StartPreciseCoverage in the Profiler domain.
type StartPreciseCoverageArgs struct {
	CallCount *bool `json:"callCount,omitempty"` // Collect accurate call counts beyond simple 'covered' or 'not covered'.
}

// NewStartPreciseCoverageArgs initializes StartPreciseCoverageArgs with the required arguments.
func NewStartPreciseCoverageArgs() *StartPreciseCoverageArgs {
	args := new(StartPreciseCoverageArgs)

	return args
}

// SetCallCount sets the CallCount optional argument. Collect accurate call counts beyond simple 'covered' or 'not covered'.
func (a *StartPreciseCoverageArgs) SetCallCount(callCount bool) *StartPreciseCoverageArgs {
	a.CallCount = &callCount
	return a
}

// TakePreciseCoverageReply represents the return values for TakePreciseCoverage in the Profiler domain.
type TakePreciseCoverageReply struct {
	Result []ScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// GetBestEffortCoverageReply represents the return values for GetBestEffortCoverage in the Profiler domain.
type GetBestEffortCoverageReply struct {
	Result []ScriptCoverage `json:"result"` // Coverage data for the current isolate.
}
