// Code generated by cdpgen. DO NOT EDIT.

package storage

import (
	"encoding/json"
	"errors"
	"fmt"
)

// Type Enum of possible storage types.
type Type int

// Type as enums.
const (
	TypeNotSet Type = iota
	TypeAppcache
	TypeCookies
	TypeFileSystems
	TypeIndexeddb
	TypeLocalStorage
	TypeShaderCache
	TypeWebsql
	TypeServiceWorkers
	TypeCacheStorage
	TypeAll
	TypeOther
)

// Valid returns true if enum is set.
func (e Type) Valid() bool {
	return e >= 1 && e <= 11
}

func (e Type) String() string {
	switch e {
	case 0:
		return "TypeNotSet"
	case 1:
		return "appcache"
	case 2:
		return "cookies"
	case 3:
		return "file_systems"
	case 4:
		return "indexeddb"
	case 5:
		return "local_storage"
	case 6:
		return "shader_cache"
	case 7:
		return "websql"
	case 8:
		return "service_workers"
	case 9:
		return "cache_storage"
	case 10:
		return "all"
	case 11:
		return "other"
	}
	return fmt.Sprintf("Type(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e Type) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("storage.Type: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *Type) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"appcache\"":
		*e = 1
	case "\"cookies\"":
		*e = 2
	case "\"file_systems\"":
		*e = 3
	case "\"indexeddb\"":
		*e = 4
	case "\"local_storage\"":
		*e = 5
	case "\"shader_cache\"":
		*e = 6
	case "\"websql\"":
		*e = 7
	case "\"service_workers\"":
		*e = 8
	case "\"cache_storage\"":
		*e = 9
	case "\"all\"":
		*e = 10
	case "\"other\"":
		*e = 11
	default:
		return fmt.Errorf("storage.Type: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// UsageForType Usage for a storage type.
type UsageForType struct {
	StorageType Type    `json:"storageType"` // Name of storage type.
	Usage       float64 `json:"usage"`       // Storage usage (bytes).
}
