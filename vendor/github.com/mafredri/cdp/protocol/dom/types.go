// Code generated by cdpgen. DO NOT EDIT.

package dom

import (
	"encoding/json"
	"errors"
	"fmt"
)

// NodeID Unique DOM node identifier.
type NodeID int

// BackendNodeID Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.
//
// Note: This type is experimental.
type BackendNodeID int

// BackendNode Backend node with a friendly name.
//
// Note: This type is experimental.
type BackendNode struct {
	NodeType      int           `json:"nodeType"`      // Node's nodeType.
	NodeName      string        `json:"nodeName"`      // Node's nodeName.
	BackendNodeID BackendNodeID `json:"backendNodeId"` // No description.
}

// PseudoType Pseudo element type.
type PseudoType int

// PseudoType as enums.
const (
	PseudoTypeNotSet PseudoType = iota
	PseudoTypeFirstLine
	PseudoTypeFirstLetter
	PseudoTypeBefore
	PseudoTypeAfter
	PseudoTypeBackdrop
	PseudoTypeSelection
	PseudoTypeFirstLineInherited
	PseudoTypeScrollbar
	PseudoTypeScrollbarThumb
	PseudoTypeScrollbarButton
	PseudoTypeScrollbarTrack
	PseudoTypeScrollbarTrackPiece
	PseudoTypeScrollbarCorner
	PseudoTypeResizer
	PseudoTypeInputListButton
)

// Valid returns true if enum is set.
func (e PseudoType) Valid() bool {
	return e >= 1 && e <= 15
}

func (e PseudoType) String() string {
	switch e {
	case 0:
		return "PseudoTypeNotSet"
	case 1:
		return "first-line"
	case 2:
		return "first-letter"
	case 3:
		return "before"
	case 4:
		return "after"
	case 5:
		return "backdrop"
	case 6:
		return "selection"
	case 7:
		return "first-line-inherited"
	case 8:
		return "scrollbar"
	case 9:
		return "scrollbar-thumb"
	case 10:
		return "scrollbar-button"
	case 11:
		return "scrollbar-track"
	case 12:
		return "scrollbar-track-piece"
	case 13:
		return "scrollbar-corner"
	case 14:
		return "resizer"
	case 15:
		return "input-list-button"
	}
	return fmt.Sprintf("PseudoType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e PseudoType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("dom.PseudoType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *PseudoType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"first-line\"":
		*e = 1
	case "\"first-letter\"":
		*e = 2
	case "\"before\"":
		*e = 3
	case "\"after\"":
		*e = 4
	case "\"backdrop\"":
		*e = 5
	case "\"selection\"":
		*e = 6
	case "\"first-line-inherited\"":
		*e = 7
	case "\"scrollbar\"":
		*e = 8
	case "\"scrollbar-thumb\"":
		*e = 9
	case "\"scrollbar-button\"":
		*e = 10
	case "\"scrollbar-track\"":
		*e = 11
	case "\"scrollbar-track-piece\"":
		*e = 12
	case "\"scrollbar-corner\"":
		*e = 13
	case "\"resizer\"":
		*e = 14
	case "\"input-list-button\"":
		*e = 15
	default:
		return fmt.Errorf("dom.PseudoType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// ShadowRootType Shadow root type.
type ShadowRootType int

// ShadowRootType as enums.
const (
	ShadowRootTypeNotSet ShadowRootType = iota
	ShadowRootTypeUserAgent
	ShadowRootTypeOpen
	ShadowRootTypeClosed
)

// Valid returns true if enum is set.
func (e ShadowRootType) Valid() bool {
	return e >= 1 && e <= 3
}

func (e ShadowRootType) String() string {
	switch e {
	case 0:
		return "ShadowRootTypeNotSet"
	case 1:
		return "user-agent"
	case 2:
		return "open"
	case 3:
		return "closed"
	}
	return fmt.Sprintf("ShadowRootType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e ShadowRootType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("dom.ShadowRootType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *ShadowRootType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"user-agent\"":
		*e = 1
	case "\"open\"":
		*e = 2
	case "\"closed\"":
		*e = 3
	default:
		return fmt.Errorf("dom.ShadowRootType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// RGBA A structure holding an RGBA color.
type RGBA struct {
	R int      `json:"r"`           // The red component, in the [0-255] range.
	G int      `json:"g"`           // The green component, in the [0-255] range.
	B int      `json:"b"`           // The blue component, in the [0-255] range.
	A *float64 `json:"a,omitempty"` // The alpha component, in the [0-1] range (default: 1).
}

// Quad An array of quad vertices, x immediately followed by y for each point, points clock-wise.
//
// Note: This type is experimental.
type Quad []float64

// BoxModel Box model.
//
// Note: This type is experimental.
type BoxModel struct {
	Content      Quad              `json:"content"`                // Content box
	Padding      Quad              `json:"padding"`                // Padding box
	Border       Quad              `json:"border"`                 // Border box
	Margin       Quad              `json:"margin"`                 // Margin box
	Width        int               `json:"width"`                  // Node width
	Height       int               `json:"height"`                 // Node height
	ShapeOutside *ShapeOutsideInfo `json:"shapeOutside,omitempty"` // Shape outside coordinates
}

// ShapeOutsideInfo CSS Shape Outside details.
//
// Note: This type is experimental.
type ShapeOutsideInfo struct {
	Bounds      Quad              `json:"bounds"`      // Shape bounds
	Shape       []json.RawMessage `json:"shape"`       // Shape coordinate details
	MarginShape []json.RawMessage `json:"marginShape"` // Margin shape bounds
}

// Rect Rectangle.
//
// Note: This type is experimental.
type Rect struct {
	X      float64 `json:"x"`      // X coordinate
	Y      float64 `json:"y"`      // Y coordinate
	Width  float64 `json:"width"`  // Rectangle width
	Height float64 `json:"height"` // Rectangle height
}
